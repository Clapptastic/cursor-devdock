"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/services";
exports.ids = ["pages/api/services"];
exports.modules = {

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = require("axios");

/***/ }),

/***/ "(api)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"activateApiKey\": () => (/* binding */ activateApiKey),\n/* harmony export */   \"addTaskDependency\": () => (/* binding */ addTaskDependency),\n/* harmony export */   \"analyzeTaskComplexity\": () => (/* binding */ analyzeTaskComplexity),\n/* harmony export */   \"apiKeysAPI\": () => (/* binding */ apiKeysAPI),\n/* harmony export */   \"browserToolsAPI\": () => (/* binding */ browserToolsAPI),\n/* harmony export */   \"checkAllServices\": () => (/* binding */ checkAllServices),\n/* harmony export */   \"checkServiceStatus\": () => (/* binding */ checkServiceStatus),\n/* harmony export */   \"claudeAPI\": () => (/* binding */ claudeAPI),\n/* harmony export */   \"clearSubtasks\": () => (/* binding */ clearSubtasks),\n/* harmony export */   \"createApiKey\": () => (/* binding */ createApiKey),\n/* harmony export */   \"createResearchTask\": () => (/* binding */ createResearchTask),\n/* harmony export */   \"deactivateApiKey\": () => (/* binding */ deactivateApiKey),\n/* harmony export */   \"debugStep\": () => (/* binding */ debugStep),\n/* harmony export */   \"debugVisualizerAPI\": () => (/* binding */ debugVisualizerAPI),\n/* harmony export */   \"deleteApiKey\": () => (/* binding */ deleteApiKey),\n/* harmony export */   \"deleteTask\": () => (/* binding */ deleteTask),\n/* harmony export */   \"executeDebugCommand\": () => (/* binding */ executeDebugCommand),\n/* harmony export */   \"exportTasks\": () => (/* binding */ exportTasks),\n/* harmony export */   \"fixDependencies\": () => (/* binding */ fixDependencies),\n/* harmony export */   \"generateSubtasks\": () => (/* binding */ generateSubtasks),\n/* harmony export */   \"getApiKeys\": () => (/* binding */ getApiKeys),\n/* harmony export */   \"getBrowserLogs\": () => (/* binding */ getBrowserLogs),\n/* harmony export */   \"getComplexityReport\": () => (/* binding */ getComplexityReport),\n/* harmony export */   \"getConsoleErrors\": () => (/* binding */ getConsoleErrors),\n/* harmony export */   \"getDebugSession\": () => (/* binding */ getDebugSession),\n/* harmony export */   \"getDebugSessions\": () => (/* binding */ getDebugSessions),\n/* harmony export */   \"getMCPServices\": () => (/* binding */ getMCPServices),\n/* harmony export */   \"getNetworkErrors\": () => (/* binding */ getNetworkErrors),\n/* harmony export */   \"getNetworkLogs\": () => (/* binding */ getNetworkLogs),\n/* harmony export */   \"getNextTask\": () => (/* binding */ getNextTask),\n/* harmony export */   \"getServiceLogs\": () => (/* binding */ getServiceLogs),\n/* harmony export */   \"getTaskById\": () => (/* binding */ getTaskById),\n/* harmony export */   \"getTasks\": () => (/* binding */ getTasks),\n/* harmony export */   \"importTasks\": () => (/* binding */ importTasks),\n/* harmony export */   \"kaneoAPI\": () => (/* binding */ kaneoAPI),\n/* harmony export */   \"mcpKonnectAPI\": () => (/* binding */ mcpKonnectAPI),\n/* harmony export */   \"mcpRestAPI\": () => (/* binding */ mcpRestAPI),\n/* harmony export */   \"nodejsDebuggerAPI\": () => (/* binding */ nodejsDebuggerAPI),\n/* harmony export */   \"registerService\": () => (/* binding */ registerService),\n/* harmony export */   \"removeTaskDependency\": () => (/* binding */ removeTaskDependency),\n/* harmony export */   \"reportBrowserLog\": () => (/* binding */ reportBrowserLog),\n/* harmony export */   \"reportConsoleError\": () => (/* binding */ reportConsoleError),\n/* harmony export */   \"reportNetworkError\": () => (/* binding */ reportNetworkError),\n/* harmony export */   \"reportNetworkLog\": () => (/* binding */ reportNetworkLog),\n/* harmony export */   \"scrapeURL\": () => (/* binding */ scrapeURL),\n/* harmony export */   \"scraperAPI\": () => (/* binding */ scraperAPI),\n/* harmony export */   \"setDebugBreakpoint\": () => (/* binding */ setDebugBreakpoint),\n/* harmony export */   \"startDebugSession\": () => (/* binding */ startDebugSession),\n/* harmony export */   \"stopDebugSession\": () => (/* binding */ stopDebugSession),\n/* harmony export */   \"submitTask\": () => (/* binding */ submitTask),\n/* harmony export */   \"updateTaskPriority\": () => (/* binding */ updateTaskPriority),\n/* harmony export */   \"updateTaskStatus\": () => (/* binding */ updateTaskStatus),\n/* harmony export */   \"validateDependencies\": () => (/* binding */ validateDependencies),\n/* harmony export */   \"verifyApiKey\": () => (/* binding */ verifyApiKey)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);\n\n// Define base URLs for all services\nconst CLAUDE_TASK_MASTER_URL = \"http://localhost:8002\" || 0;\nconst SCRAPER_URL = \"http://localhost:8003\" || 0;\nconst BROWSER_TOOLS_URL = \"http://localhost:8004\" || 0;\nconst DEBUG_VISUALIZER_URL = process.env.DEBUG_VISUALIZER_URL || \"http://localhost:10006\";\nconst NODEJS_DEBUGGER_URL = process.env.NODEJS_DEBUGGER_URL || \"http://localhost:10008\";\nconst KANEO_URL = process.env.KANEO_URL || \"http://localhost:10007\";\nconst MCP_REST_API_URL = \"http://localhost:8001\" || 0;\nconst MCP_KONNECT_URL = process.env.MCP_KONNECT_URL || \"http://localhost:10000\";\nconst API_KEYS_SERVICE_URL = process.env.API_KEYS_SERVICE_URL || \"http://localhost:10010\";\n// For browser-side requests, always use localhost URLs\nconst CLIENT_CLAUDE_TASK_MASTER_URL = \"http://localhost:10002\";\nconst CLIENT_SCRAPER_URL = \"http://localhost:10004\";\nconst CLIENT_BROWSER_TOOLS_URL = \"http://localhost:10005\";\nconst CLIENT_DEBUG_VISUALIZER_URL = \"http://localhost:10006\";\nconst CLIENT_NODEJS_DEBUGGER_URL = \"http://localhost:10008\";\nconst CLIENT_KANEO_URL = \"http://localhost:10007\";\nconst CLIENT_MCP_REST_API_URL = \"http://localhost:10001\";\nconst CLIENT_MCP_KONNECT_URL = \"http://localhost:10000\";\nconst CLIENT_API_KEYS_SERVICE_URL = \"http://localhost:10010\";\n// Create axios instances for each service\nconst claudeAPI = axios__WEBPACK_IMPORTED_MODULE_0___default().create({\n    baseURL: CLAUDE_TASK_MASTER_URL\n});\nconst scraperAPI = axios__WEBPACK_IMPORTED_MODULE_0___default().create({\n    baseURL: SCRAPER_URL\n});\nconst browserToolsAPI = axios__WEBPACK_IMPORTED_MODULE_0___default().create({\n    baseURL: BROWSER_TOOLS_URL\n});\nconst debugVisualizerAPI = axios__WEBPACK_IMPORTED_MODULE_0___default().create({\n    baseURL: DEBUG_VISUALIZER_URL\n});\nconst nodejsDebuggerAPI = axios__WEBPACK_IMPORTED_MODULE_0___default().create({\n    baseURL: NODEJS_DEBUGGER_URL\n});\nconst kaneoAPI = axios__WEBPACK_IMPORTED_MODULE_0___default().create({\n    baseURL: KANEO_URL\n});\nconst mcpRestAPI = axios__WEBPACK_IMPORTED_MODULE_0___default().create({\n    baseURL: MCP_REST_API_URL\n});\nconst mcpKonnectAPI = axios__WEBPACK_IMPORTED_MODULE_0___default().create({\n    baseURL: MCP_KONNECT_URL\n});\nconst apiKeysAPI = axios__WEBPACK_IMPORTED_MODULE_0___default().create({\n    baseURL: API_KEYS_SERVICE_URL\n});\n// Helper functions for common API calls\n// API Keys Service calls\nconst verifyApiKey = async (service, key)=>{\n    try {\n        const response = await apiKeysAPI.post(\"/api/keys/verify\", {\n            service,\n            key\n        });\n        return {\n            valid: true,\n            ...response.data\n        };\n    } catch (error) {\n        return {\n            valid: false,\n            error: error.response?.data?.error || \"Failed to verify API key\"\n        };\n    }\n};\nconst getApiKeys = async (adminKey)=>{\n    return apiKeysAPI.get(\"/api/keys\", {\n        headers: {\n            \"x-admin-api-key\": adminKey\n        }\n    });\n};\nconst createApiKey = async (name, service, adminKey, expiresAt = null)=>{\n    return apiKeysAPI.post(\"/api/keys\", {\n        name,\n        service,\n        expiresAt\n    }, {\n        headers: {\n            \"x-admin-api-key\": adminKey\n        }\n    });\n};\nconst deactivateApiKey = async (id, adminKey)=>{\n    return apiKeysAPI.put(`/api/keys/${id}/deactivate`, {}, {\n        headers: {\n            \"x-admin-api-key\": adminKey\n        }\n    });\n};\nconst activateApiKey = async (id, adminKey)=>{\n    return apiKeysAPI.put(`/api/keys/${id}/activate`, {}, {\n        headers: {\n            \"x-admin-api-key\": adminKey\n        }\n    });\n};\nconst deleteApiKey = async (id, adminKey)=>{\n    return apiKeysAPI.delete(`/api/keys/${id}`, {\n        headers: {\n            \"x-admin-api-key\": adminKey\n        }\n    });\n};\n// Claude Task Master API calls\nconst submitTask = async (taskData)=>{\n    const { title , prompt , context , priority , model , dependencies , apiKey  } = taskData;\n    // Convert dependencies string to array if necessary\n    let deps = dependencies;\n    if (typeof dependencies === \"string\" && dependencies.trim() !== \"\") {\n        deps = dependencies.split(\",\").map((id)=>id.trim());\n    }\n    // If apiKey is provided, verify it first\n    if (apiKey) {\n        const keyVerification = await verifyApiKey(\"anthropic\", apiKey);\n        if (!keyVerification.valid) {\n            throw new Error(\"Invalid API key\");\n        }\n    }\n    return claudeAPI.post(\"/api/tasks\", {\n        title,\n        prompt,\n        context,\n        priority,\n        model,\n        dependencies: deps,\n        apiKey\n    });\n};\nconst getTasks = async ()=>{\n    return claudeAPI.get(\"/api/tasks\");\n};\nconst getTaskById = async (taskId)=>{\n    return claudeAPI.get(`/api/tasks/${taskId}`);\n};\nconst updateTaskStatus = async (taskId, status)=>{\n    return claudeAPI.put(`/api/tasks/${taskId}/status`, {\n        status\n    });\n};\nconst deleteTask = async (taskId)=>{\n    return claudeAPI.delete(`/api/tasks/${taskId}`);\n};\n// New Task Master Functions\nconst generateSubtasks = async (taskId, numSubtasks = 3, context = \"\")=>{\n    return claudeAPI.post(`/api/tasks/${taskId}/subtasks`, {\n        num: numSubtasks,\n        context\n    });\n};\nconst clearSubtasks = async (taskId)=>{\n    return claudeAPI.delete(`/api/tasks/${taskId}/subtasks`);\n};\nconst analyzeTaskComplexity = async (taskIds = [], threshold = 5)=>{\n    return claudeAPI.post(\"/api/analyze-complexity\", {\n        taskIds: taskIds.length > 0 ? taskIds : undefined,\n        threshold\n    });\n};\nconst getNextTask = async ()=>{\n    return claudeAPI.get(\"/api/next-task\");\n};\nconst addTaskDependency = async (taskId, dependsOnId)=>{\n    return claudeAPI.post(`/api/tasks/${taskId}/dependencies`, {\n        dependsOn: dependsOnId\n    });\n};\nconst removeTaskDependency = async (taskId, dependsOnId)=>{\n    return claudeAPI.delete(`/api/tasks/${taskId}/dependencies/${dependsOnId}`);\n};\nconst updateTaskPriority = async (taskId, priority)=>{\n    return claudeAPI.put(`/api/tasks/${taskId}/priority`, {\n        priority\n    });\n};\n// New enhanced Task Master functionality\nconst validateDependencies = async ()=>{\n    return claudeAPI.get(\"/api/validate-dependencies\");\n};\nconst fixDependencies = async ()=>{\n    return claudeAPI.post(\"/api/fix-dependencies\");\n};\nconst getComplexityReport = async (threshold = 5)=>{\n    return claudeAPI.get(\"/api/complexity-report\", {\n        params: {\n            threshold\n        }\n    });\n};\nconst createResearchTask = async (prompt, context = \"\", model = \"claude-3-opus-20240229\")=>{\n    return claudeAPI.post(\"/api/research-task\", {\n        prompt,\n        context,\n        model\n    });\n};\nconst importTasks = async (tasks)=>{\n    return claudeAPI.post(\"/api/tasks/import\", {\n        tasks\n    });\n};\nconst exportTasks = async ()=>{\n    return claudeAPI.get(\"/api/tasks/export\");\n};\n// Scraper API calls\nconst scrapeURL = async (url, selectors, stealthMode = false)=>{\n    const endpoint = stealthMode ? \"/stealth-scrape\" : \"/scrape\";\n    return scraperAPI.post(endpoint, {\n        url,\n        selectors\n    });\n};\n// Browser Tools API calls\nconst getBrowserLogs = async ()=>{\n    return browserToolsAPI.get(\"/api/browser-logs\");\n};\nconst getConsoleErrors = async ()=>{\n    return browserToolsAPI.get(\"/api/console-errors\");\n};\nconst getNetworkErrors = async ()=>{\n    return browserToolsAPI.get(\"/api/network-errors\");\n};\nconst getNetworkLogs = async ()=>{\n    return browserToolsAPI.get(\"/api/network-logs\");\n};\nconst reportBrowserLog = async (url, event, details = {})=>{\n    return browserToolsAPI.post(\"/api/browser-logs\", {\n        url,\n        event,\n        details\n    });\n};\nconst reportConsoleError = async (url, message, stack)=>{\n    return browserToolsAPI.post(\"/api/console-errors\", {\n        url,\n        message,\n        stack\n    });\n};\nconst reportNetworkError = async (url, status, statusText, method)=>{\n    return browserToolsAPI.post(\"/api/network-errors\", {\n        url,\n        status,\n        statusText,\n        method\n    });\n};\nconst reportNetworkLog = async (url, method, status, duration, size)=>{\n    return browserToolsAPI.post(\"/api/network-logs\", {\n        url,\n        method,\n        status,\n        duration,\n        size\n    });\n};\n// Node.js Debugger API calls\nconst startDebugSession = async (code, filename)=>{\n    return nodejsDebuggerAPI.post(\"/api/debug/start\", {\n        code,\n        filename\n    });\n};\nconst getDebugSessions = async ()=>{\n    return nodejsDebuggerAPI.get(\"/api/debug/sessions\");\n};\nconst getDebugSession = async (sessionId)=>{\n    return nodejsDebuggerAPI.get(`/api/debug/session/${sessionId}`);\n};\nconst executeDebugCommand = async (sessionId, command)=>{\n    return nodejsDebuggerAPI.post(\"/api/debug/execute\", {\n        sessionId,\n        command\n    });\n};\nconst setDebugBreakpoint = async (sessionId, line, file, action = \"add\")=>{\n    return nodejsDebuggerAPI.post(\"/api/debug/breakpoint\", {\n        sessionId,\n        line,\n        file,\n        action\n    });\n};\nconst debugStep = async (sessionId, action)=>{\n    return nodejsDebuggerAPI.post(\"/api/debug/step\", {\n        sessionId,\n        action\n    });\n};\nconst stopDebugSession = async (sessionId)=>{\n    return nodejsDebuggerAPI.post(\"/api/debug/stop\", {\n        sessionId\n    });\n};\n// MCP REST API calls\nconst getMCPServices = async ()=>{\n    return mcpKonnectAPI.get(\"/api/services\");\n};\nconst registerService = async (serviceData)=>{\n    return mcpRestAPI.post(\"/services\", serviceData);\n};\n// Helper to check if a service is available\nconst checkServiceStatus = async (url)=>{\n    try {\n        await axios__WEBPACK_IMPORTED_MODULE_0___default().get(url, {\n            timeout: 5000\n        });\n        return true;\n    } catch (error) {\n        return false;\n    }\n};\n// Check connection to all services\nconst checkAllServices = async ()=>{\n    try {\n        // Determine if we're running in the browser\n        const isBrowser = \"undefined\" !== \"undefined\";\n        // Define all services we want to check\n        const servicesToCheck = [\n            {\n                name: \"MCP REST API\",\n                url: isBrowser ? CLIENT_MCP_REST_API_URL : MCP_REST_API_URL,\n                endpoint: \"/health\"\n            },\n            {\n                name: \"MCP Konnect\",\n                url: isBrowser ? CLIENT_MCP_KONNECT_URL : MCP_KONNECT_URL,\n                endpoint: \"/api/services\"\n            },\n            {\n                name: \"Claude Task Master\",\n                url: isBrowser ? CLIENT_CLAUDE_TASK_MASTER_URL : CLAUDE_TASK_MASTER_URL,\n                endpoint: \"/health\"\n            },\n            {\n                name: \"Scraper\",\n                url: isBrowser ? CLIENT_SCRAPER_URL : SCRAPER_URL,\n                endpoint: \"/health\"\n            },\n            {\n                name: \"Browser Tools\",\n                url: isBrowser ? CLIENT_BROWSER_TOOLS_URL : BROWSER_TOOLS_URL,\n                endpoint: \"/health\"\n            },\n            {\n                name: \"Debug Visualizer\",\n                url: isBrowser ? CLIENT_DEBUG_VISUALIZER_URL : DEBUG_VISUALIZER_URL,\n                endpoint: \"/health\"\n            },\n            {\n                name: \"Node.js Debugger\",\n                url: isBrowser ? CLIENT_NODEJS_DEBUGGER_URL : NODEJS_DEBUGGER_URL,\n                endpoint: \"/health\"\n            },\n            {\n                name: \"Kaneo\",\n                url: isBrowser ? CLIENT_KANEO_URL : KANEO_URL,\n                endpoint: \"/health\"\n            },\n            {\n                name: \"API Keys Service\",\n                url: isBrowser ? CLIENT_API_KEYS_SERVICE_URL : API_KEYS_SERVICE_URL,\n                endpoint: \"/health\"\n            }\n        ];\n        // Check each service individually\n        const servicesStatus = await Promise.all(servicesToCheck.map(async (service)=>{\n            try {\n                await axios__WEBPACK_IMPORTED_MODULE_0___default().get(`${service.url}${service.endpoint}`, {\n                    timeout: 5000\n                });\n                return {\n                    name: service.name,\n                    url: service.url,\n                    status: \"available\"\n                };\n            } catch (error) {\n                console.warn(`Service ${service.name} is unavailable:`, error.message);\n                return {\n                    name: service.name,\n                    url: service.url,\n                    status: \"unavailable\"\n                };\n            }\n        }));\n        return servicesStatus;\n    } catch (error) {\n        console.error(\"Error checking services:\", error);\n        // If we're in the browser, use client URLs for fallback\n        const isBrowser1 = \"undefined\" !== \"undefined\";\n        // If we can't reach the API, return all services as unavailable\n        return [\n            {\n                name: \"MCP REST API\",\n                url: isBrowser1 ? CLIENT_MCP_REST_API_URL : MCP_REST_API_URL,\n                status: \"unavailable\"\n            },\n            {\n                name: \"MCP Konnect\",\n                url: isBrowser1 ? CLIENT_MCP_KONNECT_URL : MCP_KONNECT_URL,\n                status: \"unavailable\"\n            },\n            {\n                name: \"Claude Task Master\",\n                url: isBrowser1 ? CLIENT_CLAUDE_TASK_MASTER_URL : CLAUDE_TASK_MASTER_URL,\n                status: \"unavailable\"\n            },\n            {\n                name: \"Scraper\",\n                url: isBrowser1 ? CLIENT_SCRAPER_URL : SCRAPER_URL,\n                status: \"unavailable\"\n            },\n            {\n                name: \"Browser Tools\",\n                url: isBrowser1 ? CLIENT_BROWSER_TOOLS_URL : BROWSER_TOOLS_URL,\n                status: \"unavailable\"\n            },\n            {\n                name: \"Debug Visualizer\",\n                url: isBrowser1 ? CLIENT_DEBUG_VISUALIZER_URL : DEBUG_VISUALIZER_URL,\n                status: \"unavailable\"\n            },\n            {\n                name: \"Node.js Debugger\",\n                url: isBrowser1 ? CLIENT_NODEJS_DEBUGGER_URL : NODEJS_DEBUGGER_URL,\n                status: \"unavailable\"\n            },\n            {\n                name: \"Kaneo\",\n                url: isBrowser1 ? CLIENT_KANEO_URL : KANEO_URL,\n                status: \"unavailable\"\n            },\n            {\n                name: \"API Keys Service\",\n                url: isBrowser1 ? CLIENT_API_KEYS_SERVICE_URL : API_KEYS_SERVICE_URL,\n                status: \"unavailable\"\n            }\n        ];\n    }\n};\nconst getServiceLogs = async (serviceName)=>{\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0___default().get(`/api/logs/${serviceName}`);\n        return response.data;\n    } catch (error) {\n        console.error(`Error fetching logs for ${serviceName}:`, error);\n        throw error;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/api.ts\n");

/***/ }),

/***/ "(api)/./pages/api/services.ts":
/*!*******************************!*\
  !*** ./pages/api/services.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/api */ \"(api)/./lib/api.ts\");\n\nasync function handler(req, res) {\n    if (req.method === \"GET\") {\n        try {\n            const services = await (0,_lib_api__WEBPACK_IMPORTED_MODULE_0__.checkAllServices)();\n            res.status(200).json(services);\n        } catch (error) {\n            console.error(\"Error fetching services:\", error);\n            res.status(500).json({\n                error: \"Failed to fetch services\"\n            });\n        }\n    } else {\n        res.setHeader(\"Allow\", [\n            \"GET\"\n        ]);\n        res.status(405).end(`Method ${req.method} Not Allowed`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvc2VydmljZXMudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDaUQ7QUFFbEMsZUFBZUMsT0FBTyxDQUFDQyxHQUFtQixFQUFFQyxHQUFvQixFQUFFO0lBQy9FLElBQUlELEdBQUcsQ0FBQ0UsTUFBTSxLQUFLLEtBQUssRUFBRTtRQUN4QixJQUFJO1lBQ0YsTUFBTUMsUUFBUSxHQUFHLE1BQU1MLDBEQUFnQixFQUFFO1lBQ3pDRyxHQUFHLENBQUNHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDRixRQUFRLENBQUMsQ0FBQztRQUNqQyxFQUFFLE9BQU9HLEtBQUssRUFBRTtZQUNkQyxPQUFPLENBQUNELEtBQUssQ0FBQywwQkFBMEIsRUFBRUEsS0FBSyxDQUFDLENBQUM7WUFDakRMLEdBQUcsQ0FBQ0csTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUM7Z0JBQUVDLEtBQUssRUFBRSwwQkFBMEI7YUFBRSxDQUFDLENBQUM7UUFDOUQsQ0FBQztJQUNILE9BQU87UUFDTEwsR0FBRyxDQUFDTyxTQUFTLENBQUMsT0FBTyxFQUFFO1lBQUMsS0FBSztTQUFDLENBQUMsQ0FBQztRQUNoQ1AsR0FBRyxDQUFDRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNLLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRVQsR0FBRyxDQUFDRSxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUMxRCxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2N1cnNvci1kZXZkb2NrLWRhc2hib2FyZC8uL3BhZ2VzL2FwaS9zZXJ2aWNlcy50cz9lM2IzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRBcGlSZXF1ZXN0LCBOZXh0QXBpUmVzcG9uc2UgfSBmcm9tICduZXh0JztcbmltcG9ydCB7IGNoZWNrQWxsU2VydmljZXMgfSBmcm9tICcuLi8uLi9saWIvYXBpJztcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihyZXE6IE5leHRBcGlSZXF1ZXN0LCByZXM6IE5leHRBcGlSZXNwb25zZSkge1xuICBpZiAocmVxLm1ldGhvZCA9PT0gJ0dFVCcpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgc2VydmljZXMgPSBhd2FpdCBjaGVja0FsbFNlcnZpY2VzKCk7XG4gICAgICByZXMuc3RhdHVzKDIwMCkuanNvbihzZXJ2aWNlcyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHNlcnZpY2VzOicsIGVycm9yKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdGYWlsZWQgdG8gZmV0Y2ggc2VydmljZXMnIH0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXMuc2V0SGVhZGVyKCdBbGxvdycsIFsnR0VUJ10pO1xuICAgIHJlcy5zdGF0dXMoNDA1KS5lbmQoYE1ldGhvZCAke3JlcS5tZXRob2R9IE5vdCBBbGxvd2VkYCk7XG4gIH1cbn0gIl0sIm5hbWVzIjpbImNoZWNrQWxsU2VydmljZXMiLCJoYW5kbGVyIiwicmVxIiwicmVzIiwibWV0aG9kIiwic2VydmljZXMiLCJzdGF0dXMiLCJqc29uIiwiZXJyb3IiLCJjb25zb2xlIiwic2V0SGVhZGVyIiwiZW5kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./pages/api/services.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/services.ts"));
module.exports = __webpack_exports__;

})();