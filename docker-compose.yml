services:
  # Database for secure data storage
  postgres:
    image: postgres:15-alpine
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=devdock
      - POSTGRES_PASSWORD=devdock_secure_pwd
      - POSTGRES_DB=devdock
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devdock"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Keys Management Service
  api-keys-service:
    build:
      context: ./services/api-keys-service
    ports:
      - "10010:8010"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - PORT=8010
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=devdock
      - DB_PASSWORD=devdock_secure_pwd
      - DB_NAME=devdock
      - DB_SSL=false
      - MCP_REST_API_URL=http://mcp-rest-api:8001

  # MCP Server Integration - using mock service
  mcp-konnect:
    build:
      context: ./services/kaneo
      dockerfile: Dockerfile
    ports:
      - "10000:3333"
    volumes:
      - ./config/mcp-konnect:/etc/mcp-konnect
    environment:
      - PORT=3333
    # This is now using our mock service

  mcp-rest-api:
    build:
      context: ./services/mcp-rest-api
    ports:
      - "10001:8001"
    depends_on:
      - mcp-konnect
      - postgres
    environment:
      - MCP_KONNECT_URL=http://mcp-konnect:3333
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=devdock
      - DB_PASSWORD=devdock_secure_pwd
      - DB_NAME=devdock
      - DB_SSL=false

  # AI Task Management
  claude-task-master:
    build:
      context: ./services/claude-task-master
    ports:
      - "10002:8002"
    depends_on:
      - mcp-rest-api
      - api-keys-service
    environment:
      - MCP_REST_API_URL=http://mcp-rest-api:8001
      - API_KEYS_SERVICE_URL=http://api-keys-service:8010
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=devdock
      - DB_PASSWORD=devdock_secure_pwd
      - DB_NAME=devdock
      - DB_SSL=false

  # Web UI Dashboard
  dashboard:
    build:
      context: ./services/dashboard
    ports:
      - "10003:3000"
    depends_on:
      - mcp-konnect
      - mcp-rest-api
      - claude-task-master
      - scraper
      - browser-tools
      - debug-visualizer
      - kaneo
      - nodejs-debugger
      - renovate
      - api-keys-service
    environment:
      - MCP_KONNECT_URL=http://mcp-konnect:3333
      - CLAUDE_TASK_MASTER_URL=http://claude-task-master:8002
      - SCRAPER_URL=http://scraper:8003
      - BROWSER_TOOLS_URL=http://browser-tools:8004
      - DEBUG_VISUALIZER_URL=http://debug-visualizer:8005
      - NODEJS_DEBUGGER_URL=http://nodejs-debugger:7890
      - KANEO_URL=http://kaneo:3333
      - MCP_REST_API_URL=http://mcp-rest-api:8001
      - RENOVATE_SERVICE_URL=http://renovate:8099
      - API_KEYS_SERVICE_URL=http://api-keys-service:8010

  # Scraping and Stealth
  scraper:
    build:
      context: ./services/scraper
    ports:
      - "10004:8003"
    environment:
      - MCP_REST_API_URL=http://mcp-rest-api:8001

  # Browser Monitoring
  browser-tools:
    build:
      context: ./services/browser-tools
    ports:
      - "10005:8004"
    environment:
      - MCP_REST_API_URL=http://mcp-rest-api:8001

  # Debug Visualizer
  debug-visualizer:
    build:
      context: ./services/debug-visualizer
    ports:
      - "10006:8005"
    environment:
      - MCP_REST_API_URL=http://mcp-rest-api:8001

  # Node.js Debugger
  nodejs-debugger:
    build:
      context: ./services/nodejs-debugger
    ports:
      - "10008:7890"
      - "9229:9229"
    environment:
      - MCP_REST_API_URL=http://mcp-rest-api:8001
      - PORT=7890

  # Kaneo Dashboard
  kaneo:
    build:
      context: ./services/kaneo
    ports:
      - "10007:3333"
    environment:
      - MCP_REST_API_URL=http://mcp-rest-api:8001

  # Dependency Management with custom Renovate service
  renovate:
    build:
      context: ./services/renovate
    ports:
      - "10009:8099"
    environment:
      - MCP_REST_API_URL=http://mcp-rest-api:8001
    volumes:
      - ./:/app/repo

volumes:
  postgres_data: 